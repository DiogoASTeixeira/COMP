options
{
    LOOKAHEAD=1;
}
 PARSER_BEGIN(Calculator)

 public class Calculator
 {
     public static void main(String args[]) throws ParseException
     {
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression();
        System.out.println("Expression value: "+myCalc.eval(root));
        root.dump("");    
     }
 

int eval(SimpleNode node) {
    if(node.jjtGetNumChildren() == 0) // leaf node with integer value
        return node.val;
    else if(node.jjtGetNumChildren() == 1) //only one child
        return this.eval((SimpleNode) node.jjtGetChild(0));

    SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
    SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); //right child

    switch(node.id) {
        case CalculatorTreeConstants.JJTADD : return eval(lhs) + eval(rhs);
        case CalculatorTreeConstants.JJTSUB : return eval(lhs) - eval(rhs);
        case CalculatorTreeConstants.JJTMUL : return eval(lhs) * eval(rhs);
        case CalculatorTreeConstants.JJTDIV : return eval(lhs) / eval(rhs);
        default: //abort
            System.out.println("Illegal operator!");
            System.exit(1);
    }
    return  0;
}
 }

 PARSER_END(Calculator)

 SKIP :
 {
     " " | "\r" | "\t"
 }

 TOKEN:
 {
     < INTEGER: (["0"-"9"])+ >
     |  < MINUS: "-" >
     |  < LP: "(" >
     |  < RP: ")" >
     |  < LF: "\n" >
 }
 SimpleNode Expression(): {}
 {
     Expr1(1) <LF> {return jjtThis;}
 }

 void Expr1(int sign) #void: {}
 {
     Expr2(sign) [
         ( "+" Expr2(sign) #Add(2)
         | "-" Expr2(sign) #Sub(2))
    ]
 }

 void Expr2(int sign) #void: {}
 {
     Expr3(sign)
         [ "*" Expr3(1) #Mul(2)
         | "/" Expr3(1) #Div(2)
         ]     //(..)? equivalent to [..]
 }

 void Expr3(int sign) #void: {Token t;}
 {
     t=<INTEGER>
     {
        jjtThis.val = sign * Integer.parseInt(t.image);
     } #Term
     | "-" Expr3(-1)
     | "(" Expr1(1) ")"
     | "-(" Expr1(-1) ")"
 }